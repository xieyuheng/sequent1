#+title: test of sequent1

* pass1

  #+begin_src scheme :tangle no
  (map (lambda (x) (pass1/arrow 0 x))
    '((natural natural -> natural)
      (natural natural -> (natural natural -> natural) natural)
      (:m zero -> :m)
      (:m :n succ -> :m :n recur succ)
      (:m :n succ -> :m :n (lambda (natural -> natural)
                             (zero -> zero succ)))
      ((:t : type) :t -> type)
      ((:t @ type) :t -> type)
      ((:t^2 : type) :t -> type)
      ((:t1 :t2^2 :t3^0 : j k) :t -> type)
      ((:t^2 @ type) :t -> type)))

  (map (lambda (x) (pass1/arrow 0 x))
    '((:m :n succ -> :m :n (lambda (natural -> natural)
                             (zero -> zero succ)))))
  #+end_src

* pass2

  #+begin_src scheme :tangle no
  (map (lambda (x) (pass2/arrow x '()))
    (map (lambda (x) (pass1/arrow 0 x))
      '((natural natural -> natural)
        (natural natural -> (natural natural -> natural) natural)
        (:m zero -> :m)
        (:m :n succ -> :m :n recur succ)
        (:m :n succ -> :m :n (lambda (natural natural -> natural)
                               (:m :n succ -> :m :n recur succ)
                               (:m :n succ -> :m :n recur succ)))
        ((:t : type) :t -> type)
        ((:t @ type) :t -> type)
        ((:t^2 : type) :t -> type)
        ((:t1 :t2^2 :t3^0 : j k) :t -> type)
        ((:t^2 @ type) :t -> type))))
  #+end_src
