+ sequent1 example

+ this is a prototype
  it is not useful for it is lack of so many important features

+ XIE Yuheng created

* sexp

*** natural

    #+begin_src lisp
    (dt natural (-> type)
        zero (-> natural)
        succ (natural -> natural))

    (df add (natural natural -> natural)
        (:m zero -> :m)
        (:m :n succ -> :m :n add succ))

    (df mul (natural natural -> natural)
        (:m zero -> zero)
        (:m :n succ -> :m :n mul :m add))

    (ap (->
         zero succ
         zero succ succ
         add))

    (ap (->
         zero succ succ
         zero succ succ
         mul))

    (ap (-> mul))
    #+end_src

*** list

    #+begin_src lisp
    (dt type (-> type))

    (dt natural (-> type)
        zero (-> natural)
        succ (natural -> natural))

    (df add (natural natural -> natural)
        (:m zero -> :m)
        (:m :n succ -> :m :n add succ))

    (df mul (natural natural -> natural)
        (:m zero -> zero)
        (:m :n succ -> :m :n mul :m add))

    (dt list ((:t :> type) :t -> type)
        null (-> :t list)
        cons (:t list :t -> :t list))

    ;; (df map (:t1 list (:t1 -> :t2) -> :t2 list)
    ;;     (null :f -> null)
    ;;     (:l :e cons :f -> :e :f apply :l :f map cons))

    (df append (:t list :t list -> :t1 list)
        (null :l -> :l)
        (:l :e cons :l1 -> :l :l1 append :e cons))

    (ap (->
         null
         zero cons
         zero cons
         zero cons
         null
         zero cons
         zero cons
         zero cons
         append))
    #+end_src

*** has-length

    #+begin_src lisp
    (dt has-length ((:t :> type) :t list natural -> type)
        null/has-length (-> null zero has-length)
        cons/has-length (:l :n has-length -> :l :a cons :n succ has-length))

    (df map/has-length (:l :n has-length -> :l :f map :n has-length)
        (null/has-length -> null/has-length)
        (:h cons/has-length -> :h map/has-length cons/has-length))
    #+end_src

*** vector

    #+begin_src lisp
    (dt type (-> type))

    (dt natural (-> type)
        zero (-> natural)
        succ (natural -> natural))

    (df add (natural natural -> natural)
        (:m zero -> :m)
        (:m :n succ -> :m :n add succ))

    (df mul (natural natural -> natural)
        (:m zero -> zero)
        (:m :n succ -> :m :n mul :m add))

    (dt vector ((:t :> type) natural :t -> type)
        null (-> zero :t vector)
        cons (:n :t vector :t -> :n succ :t vector))

    ;; (df map (:n :t1 vector (:t1 -> :t2) -> :n :t2 vector)
    ;;     (null :f -> null)
    ;;     (:l :e cons :f -> :e :f apply :l :f map cons))

    (df append (:m :t vector :n :t vector -> :m :n add :t vector)
        (null :l -> :l)
        (:l :e cons :l1 -> :l :l1 append :e cons))

    (ap (->
         null
         zero cons
         zero cons
         zero cons
         null
         zero cons
         zero cons
         zero cons
         append))
    #+end_src
