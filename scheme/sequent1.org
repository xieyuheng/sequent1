+ sequent1
  sequent calculus as dependent type system of functional language

+ this is a prototype
  it is not useful for it is lack of so many important features

+ XIE Yuheng created

#+PROPERTY: tangle sequent1.scm

* todo

  - parse/arrow

  - interface of ns

* helper

  #+begin_src scheme
  (use-modules (ice-9 match))

  (define-syntax cat
    (syntax-rules ()
      [(cat (str . args))
       (format str . args)]
      [(cat (str . args) (str2 . args2) ...)
       (string-append
        (cat (str . args))
        (cat (str2 . args2) ...))]))

  (define-syntax orz
    (syntax-rules ()
      [(orz . body)
       (error (cat . body))]))

  (define-syntax note
    (syntax-rules ()
      [(note . body)
       (void)]))
  #+end_src

* ><

  #+begin_src scheme
  (define (fact n)
    (match n
      ['0 1]
      [n (* n (fact (1- n)))]))

  (fact 10)

  (define (eval-expr x)
    (match x
      [('add x y) (+ (eval-expr x) (eval-expr y))]
      [('sub x y) (- (eval-expr x) (eval-expr y))]
      [('mul x y) (* (eval-expr x) (eval-expr y))]
      [('div x y) (/ (eval-expr x) (eval-expr y))]
      [v  v]))

  (eval-expr '(add 1 2))
  (eval-expr '(add 1 (add 2 3)))

  (define (my-append a b)
    (match a
      ['()  b]
      [(hd . tl) (cons hd (my-append tl b))]))

  (my-append '(1 2 3) '(4 5 6))
  #+end_src
