+ sequent calculus as dependent type system of functional language

+ a prototype interpreter

+ XIE Yuheng created

#+PROPERTY: tangle sequent1.scm

* todo

* note

*** formal-form

    - formal-arrow = (formal-cedent formal-cedent)
    - formal-cedent = (formal-form ...)
    - formal-form =
      - ('v formal-var)
      - ('n formal-name)
      - ('a formal-arrow)
      - ('b formal-bind)
    - formal-var = (symbol level)
    - formal-name = symbol
    - formal-bind = ((formal-var ...) formal-cedent live?)

*** form

    - arrow = (cedent cedent)
    - cedent = (form ...)
    - form =
      - ('var var)
      - ('name name)
      - ('arrow arrow)
      - ('bind bind)
    - var = (id level)
    - name = symbol
    - bind = ((var ...) cedent live?)
    - id = #(symbol ls)

*** env

    - env = (ds bs ns)
    - ds = (data ...)
    - bs = ((id . ls) ...)
      - ls = ((level . data) ...)
    - ns = ((name . store) ...)

*** data

    - data =
      - ('var var)
      - ('arrow arrow)
      - ('cons (name (data ...)))
      - ('trunk ((arrow ...) (data ...)))

*** store

    - store =
      - ('function function)
      - ('type-constructor type-constructor)
      - ('data-constructor data-constructor)
    - function = (formal-arrow arity (formal-arrow ...))
    - type-constructor = (formal-arrow arity (name ...))
    - data-constructor = (formal-arrow arity name)
    - arity = number

*** top

    - top =
      - ('dt type-definition)
      - ('df function-definition)
      - ('ap formal-arrow)
    - type-definition =
      ((formal-name formal-arrow) ((formal-name formal-arrow) ...))
    - function-definition =
      ((formal-name formal-arrow) (formal-arrow ...))

* helper

*** pattern match

    #+begin_src scheme
    ;; http://synthcode.com/scheme/match.scm
    (use-modules (ice-9 match))

    (define-syntax pam
      (syntax-rules ()
        [(pam v (p e ...) ...)
         (match v (p (pam-one e) ...) ...)]))

    (define-syntax pam-one
      (syntax-rules (quote)
        [(_ ((quote s) b ...)) (list (quote s) (pam-one b) ...)]
        [(_ (f b ...)) (f (pam-one b) ...)]
        [(_ e) e]))

    (pam '(a b c)
      [('a 'b . _) ('d ('k))])
    #+end_src

*** cat & orz

    #+begin_src scheme
    (define-syntax cat
      (syntax-rules ()
        [(cat (str . args))
         (format str . args)]
        [(cat (str . args) (str2 . args2) ...)
         (string-append
          (cat (str . args))
          (cat (str2 . args2) ...))]))

    (define-syntax orz
      (syntax-rules ()
        [(orz . body)
         (error (cat . body))]))

    (define-syntax note
      (syntax-rules ()
        [(note . body)
         (void)]))
    #+end_src

* ><

  #+begin_src scheme

  #+end_src
